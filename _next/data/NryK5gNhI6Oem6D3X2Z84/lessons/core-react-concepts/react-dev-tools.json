{"pageProps":{"post":{"attributes":{"description":"An essential tool in any React developer's toolbox is the official React Dev Tools extension. Brian shows you how to install and use them."},"html":"<p>React has some really great tools to enhance your developer experience. We&#39;ll go over a few of them here.</p>\n<h2 id=\"node_envdevelopment\"><code>NODE_ENV=development</code></h2>\n<p>React already has a lot of developer conveniences built into it out of the box. What&#39;s better is that they automatically strip it out when you compile your code for production.</p>\n<p>So how do you get the debugging conveniences then? Well, if you&#39;re using Parcel.js, it will compile your development server with an environment variable of <code>NODE_ENV=development</code> and then when you run <code>parcel build &lt;entry point&gt;</code> it will automatically change that to <code>NODE_ENV=production</code> which is how all the extra weight gets stripped out.</p>\n<p>Why is it important that we strip the debug stuff out? The dev bundle of React is quite a bit bigger and quite a bit slower than the production build. Make sure you&#39;re compiling with the correct environmental variables or your users will suffer.</p>\n<h2 id=\"strict-mode\">Strict Mode</h2>\n<p>React has a new strict mode. If you wrap your app in <code>&lt;React.StrictMode&gt;&lt;/React.StrictMode&gt;</code> it will give you additional warnings about things you shouldn&#39;t be doing. I&#39;m not teaching you anything that would trip warnings from <code>React.StrictMode</code> but it&#39;s good to keep your team in line and not using legacy features or things that will be soon be deprecated.</p>\n<p>Go to App.js and wrap <code>&lt;App /&gt;</code> in the render call in <code>&lt;StrictMode&gt;</code>.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// import at top</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">StrictMode</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n\n<span class=\"hljs-comment\">// replace render</span>\n<span class=\"hljs-title function_\">render</span>(\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">StrictMode</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">StrictMode</span>&gt;</span></span>,\n  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;root&quot;</span>)\n);\n</code></pre>\n<h2 id=\"dev-tools\">Dev Tools</h2>\n<p>React has wonderful dev tools that the core team maintains. They&#39;re available for both Chromium-based browsers and Firefox. They let you do several things like explore your React app like a DOM tree, modify state and props on the fly to test things out, tease out performance problems, and programtically manipulate components. Definitely worth downloading now.</p>\n","slug":"react-dev-tools","title":"React Dev Tools","section":"Core React Concepts","icon":"book","filePath":"/home/runner/work/next-react-v6/next-react-v6/lessons/04-core-react-concepts/G-react-dev-tools.md","nextSlug":"/next-react-v6/lessons/react-capabilities/react-router","prevSlug":"/next-react-v6/lessons/core-react-concepts/component-composition"}},"__N_SSG":true}