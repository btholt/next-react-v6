{"pageProps":{"post":{"attributes":{"title":"useCallback","description":"useCallback is quite similar and indeed it's implemented with the same mechanisms as useMemo except it's a callback instead of a value"},"html":"<p><a href=\"https://codesandbox.io/s/github/btholt/react-hooks-examples-v3/tree/master/?module=%2Fsrc%2FCallback.js\">Component</a></p>\n<p><code>useCallback</code> is quite similar and indeed it&#39;s implemented with the same mechanisms as <code>useMemo</code>. Our goal is that <code>ExpensiveComputationComponent</code> only re-renders whenever it absolutely must. Typically whenever React detects a change higher-up in an app, it re-renders everything underneath it. This normally isn&#39;t a big deal because React is quite fast at normal things. However you can run into performance issues sometimes where some components are bad to re-render without reason.</p>\n<p>In this case, we&#39;re using a new feature of React called <code>React.memo</code>. This is similar to <code>PureComponent</code> where a component will do a simple check on its props to see if they&#39;ve changed and if not it will not re-render this component (or its children, which can bite you.) <code>React.memo</code> provides this functionality for function components. Given that, we need to make sure that the function itself given to <code>ExpensiveComputationComponent</code> is the <em>same</em> function every time. We can use <code>useCallback</code> to make sure that React is handing <em>the same fibonacci</em> to <code>ExpensiveComputationComponent</code> every time so it passes its <code>React.memo</code> check every single time. Now it&#39;s only if <code>count</code> changes will it actually re-render (as evidenced by the time.)</p>\n<p>Try removing the useCallback call and see if you get the the count to 40+ that the page crawls as it updates every second.</p>\n","slug":"usecallback","title":"useCallback","section":"Hooks in Depth","icon":"search","filePath":"/home/runner/work/next-react-v6/next-react-v6/lessons/09-hooks-in-depth/G-usecallback.md","nextSlug":"/next-react-v6/lessons/hooks-in-depth/uselayouteffect","prevSlug":"/next-react-v6/lessons/hooks-in-depth/usememo"}},"__N_SSG":true}