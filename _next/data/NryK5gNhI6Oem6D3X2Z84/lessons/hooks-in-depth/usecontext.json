{"pageProps":{"post":{"attributes":{"title":"useContext","description":""},"html":"<p><a href=\"https://codesandbox.io/s/github/btholt/react-hooks-examples-v3/tree/master/?module=%2Fsrc%2FContext.js\">Component</a></p>\n<p>An early problem with the React problem is called &quot;data tunneling&quot; or &quot;prop drilling&quot;. This is when you have a top level component (in our case the parent component) and a child component way down in the hierarchy that need the same data (like the user object.) We could pass that data down, parent-to-child, for each of the intermediary components but that sucks because now each of <code>LevelTwo</code>, <code>LevelThree</code>, and <code>LevelFour</code> all have to know about the user object even when they themselves don&#39;t need it, just their children. This is prop drilling: passing down this data in unnecessary intermediaries.</p>\n<p>Enter context. Context allows you to create a wormhole where stuff goes in and a wormhole in a child component where that same data comes out and the stuff in the middle doesn&#39;t know it&#39;s there. Now that data is available anywhere inside of the <code>UserContext.Provider</code>. <code>useContext</code> just pulls that data out when given a Context object as a parameter. You don&#39;t have to use <code>useState</code> and <code>useContext</code> together (the data can be any shape, not just <code>useState</code>-shaped) but I find it convenient when child components need to be able to update the context as well.</p>\n<p>In general, context adds a decent amount of complexity to an app. A bit of prop drilling is fine. Only put things in context that are truly application-wide state like user information or auth keys and then use local state for the rest.</p>\n<p>Often you&#39;ll use context instead of Redux or another state store. You could get fancy and use <code>useReducer</code> and <code>useContext</code> together to get a pretty great approximation of Redux-like features.</p>\n","slug":"usecontext","title":"useContext","section":"Hooks in Depth","icon":"search","filePath":"/home/runner/work/next-react-v6/next-react-v6/lessons/09-hooks-in-depth/C-usecontext.md","nextSlug":"/next-react-v6/lessons/hooks-in-depth/useref","prevSlug":"/next-react-v6/lessons/hooks-in-depth/useeffect"}},"__N_SSG":true}