{"pageProps":{"post":{"attributes":{"title":"useMemo","description":"useMemo memoizes expensive function calls so they only are re-evaluated when needed."},"html":"<p><a href=\"https://codesandbox.io/s/github/btholt/react-hooks-examples-v3/tree/master/?module=%2Fsrc%2FMemo.js\">Component</a></p>\n<p><code>useMemo</code> and <code>useCallback</code> are performance optimizations. Use them only when you already have a performance problem instead of pre-emptively. It adds unnecessary complexity otherwise.</p>\n<p><code>useMemo</code> memoizes expensive function calls so they only are re-evaluated when needed. I put in the [fibonacci sequence][fibonacci] in its recursive style to simulate this. All you need to know is that once you&#39;re calling <code>fibonacci</code> with 30+ it gets quite computationally expensive and not something you want to do unnecessarily as it will cause pauses and jank. It will now only call <code>fibonacci</code> if count changes and will just the previous, memoized answer if it hasn&#39;t changed.</p>\n<p>If we didn&#39;t have the <code>useMemo</code> call, everytime I clicked on the title to cause the color to change from red to green or vice versa it&#39;d unnecessarily recalculate the answer of <code>fibonacci</code> but because we did use <code>useMemo</code> it will only calculate it when <code>num</code> has changed.</p>\n<p>Feel try to remove <code>useMemo</code>, get <code>num</code> to 40 or so, and then click the h1. It&#39;ll be slow.</p>\n","slug":"usememo","title":"useMemo","section":"Hooks in Depth","icon":"search","filePath":"/home/runner/work/next-react-v6/next-react-v6/lessons/09-hooks-in-depth/F-usememo.md","nextSlug":"/next-react-v6/lessons/hooks-in-depth/usecallback","prevSlug":"/next-react-v6/lessons/hooks-in-depth/usereducer"}},"__N_SSG":true}