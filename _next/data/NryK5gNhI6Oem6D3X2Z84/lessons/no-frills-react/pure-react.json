{"pageProps":{"post":{"attributes":{"description":"Brian teaches React without any frills: just you, some JavaScript, and the browser. No build step."},"html":"<p>Let&#39;s start by writing pure React. No compile step. No JSX. No Babel. No Webpack or Parcel. Just some JavaScript on a page.</p>\n<p>Let&#39;s start your project. Create your project directory. I&#39;m going to call mine <code>adopt-me</code> since we&#39;re going to be building a pet adoption app throughout this course. Create an index.html and put it into a <code>src/</code> directory inside of your project folder. In index.html put:</p>\n<pre><code class=\"hljs language-javascript\">&lt;!<span class=\"hljs-variable constant_\">DOCTYPE</span> html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n  &lt;meta charset=&quot;UTF-8&quot;&gt;\n  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;./style.css&quot;&gt;\n  &lt;title&gt;Adopt Me&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;div id=&quot;root&quot;&gt;not rendered&lt;/div&gt;\n  &lt;script src=&quot;https://unpkg.com/react@17.0.1/umd/react.development.js&quot;&gt;&lt;/script&gt;\n  &lt;script src=&quot;https://unpkg.com/react-dom@17.0.1/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;\n  &lt;script&gt;\n    // Your code is going to go here\n  &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<blockquote>\n<p>What&#39;s new between React 16 and React 17? Nothing! No new features were added. It was a &quot;stepping stone&quot; version that allows sites to upgrade React versions gradually. Previously only one copy of React could run on a page at a time and with v17 more than one can. <a href=\"https://reactjs.org/blog/2020/10/20/react-v17.html\">See more here</a>.</p>\n</blockquote>\n<p>Now open this file in your browser. On Mac, hit âŒ˜ (command) + O in your favorite browser, and on Windows and Linux hit CTRL + O to open the Open prompt. Navigate to wherever you saved the file and open it. You should see a line of text saying &quot;not rendered&quot;.</p>\n<ul>\n<li>Pretty standard HTML5 document. If this is confusing, I teach another course called <a href=\"https://frontendmasters.com/courses/web-development-v2/\">Intro to Web Dev</a> that can help you out.</li>\n<li>We&#39;re adding a root div. We&#39;ll render our React app here in a sec. It doesn&#39;t <em>have</em> to be called root, just a common practice.</li>\n<li>We have two script tags.<ul>\n<li>The first is the React library. This library is the interface of how to interact with React; all the methods (except one) will be via this library. It contains no way of rendering itself though; it&#39;s just the API.</li>\n<li>The second library is the rendering layer. Since we&#39;re rendering to the browser, we&#39;re using React DOM. There are other React libraries like React Native, React 360 (formerly React VR), A-Frame React, React Blessed, and others. You need both script tags. The order is not important.</li>\n</ul>\n</li>\n<li>The last script tag is where we&#39;re going to put our code. You don&#39;t typically do this but I wanted to start as simple as possible. This script tag must come <em>after</em> the other two.</li>\n</ul>\n<blockquote>\n<p>Let&#39;s add some style! <a href=\"https://raw.githubusercontent.com/btholt/citr-v6-project/master/01-no-frills-react/src/style.css\">Click here</a> to get the stylesheet for this course. If you follow along with the course and use the same class names, the styles will be applied for you automatically. This isn&#39;t a course on CSS so I make no assertion it&#39;s any good!</p>\n</blockquote>\n<p>In the last script tag, put the following.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createElement</span>(\n    <span class=\"hljs-string\">&quot;div&quot;</span>,\n    {},\n    <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&quot;h1&quot;</span>, {}, <span class=\"hljs-string\">&quot;Adopt Me!&quot;</span>)\n  );\n};\n\n<span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-title class_\">App</span>), <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;root&quot;</span>));\n</code></pre>\n<p>This is about the simplest React app you can build.</p>\n<ul>\n<li>The first thing we do is make our own component, App. React is all about making components. And then taking those components and making more components out of those.</li>\n<li>There are two types of components, function components and class components. This is a function component. We&#39;ll see class components shortly.</li>\n<li>A function component <em>must</em> return markup (which is what <code>React.createElement</code> generates.)</li>\n<li>These component render functions <em>have</em> to be fast. This function is going to be called a lot. It&#39;s a hot code path.</li>\n<li>Inside of the render function, you cannot modify any sort of state. Put in functional terms, this function must be pure. You don&#39;t know how or when the function will be called so it can&#39;t modify any ambient state.</li>\n<li><code>React.createElement</code> creates one <em>instance</em> of some component. If you pass it a <em>string</em>, it will create a DOM tag with that as the string. We used <code>h1</code> and <code>div</code>, those tags are output to the DOM. If we put <code>x-some-custom-element</code>, it&#39;ll output that (so web components are possible too.)</li>\n<li>The second empty object (you can put <code>null</code> too) is attributes we&#39;re passing to the tag or component. Whatever we put in this will be output to the element (like id or style.)</li>\n<li><code>ReactDOM.render</code> is what takes our rendered <code>App</code> component and puts in the DOM (in our case we&#39;re putting it in the <code>root</code> element.)</li>\n<li>Notice we&#39;re using <code>React.createElement</code> with <code>App</code> as a parameter to <code>ReactDOM.render</code>. We need an <em>instance</em> of <code>App</code> to render out. <code>App</code> is a class of components and we need to render one instance of a class. That&#39;s what <code>React.createElement</code> does: it makes an instance of a class.</li>\n</ul>\n","slug":"pure-react","title":"Pure React","section":"No Frills React","icon":"eye","filePath":"/home/runner/work/next-react-v6/next-react-v6/lessons/02-no-frills-react/A-pure-react.md","nextSlug":"/next-react-v6/lessons/no-frills-react/components","prevSlug":"/next-react-v6/lessons/welcome/intro"}},"__N_SSG":true}