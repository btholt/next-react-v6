{"pageProps":{"post":{"attributes":{"description":"While many components are written with hooks, the older API of class-based components are still around and still useful. Brian shows you when and how to use the class components API."},"html":"<p>This class has been showing you the latest APIs for React: hooks. Going forward, these sorts of components will be the default way of writing React. However, the class API still has its uses and isn&#39;t going anywhere anytime soon. In this section we&#39;re going to go through and learn the basics of it since there&#39;s still a lot class code out in the wild and the new API can&#39;t do <em>everything</em> the old one can, so it&#39;s still useful in some cases.</p>\n<p>Let&#39;s go make Details.js as a class.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// replace Details.js</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { withRouter } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react-router-dom&quot;</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Details</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Component</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">super</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = { <span class=\"hljs-attr\">loading</span>: <span class=\"hljs-literal\">true</span> };\n  }\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">componentDidMount</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(\n      <span class=\"hljs-string\">`http://pets-v2.dev-apis.com/pets?id=<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.props.match.params.id}</span>`</span>\n    );\n    <span class=\"hljs-keyword\">const</span> json = <span class=\"hljs-keyword\">await</span> res.<span class=\"hljs-title function_\">json</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">assign</span>({ <span class=\"hljs-attr\">loading</span>: <span class=\"hljs-literal\">false</span> }, json.<span class=\"hljs-property\">pets</span>[<span class=\"hljs-number\">0</span>]));\n  }\n\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>);\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">loading</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>loading … <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span>;\n    }\n\n    <span class=\"hljs-keyword\">const</span> { animal, breed, city, state, description, name } = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>;\n\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;details&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{`${animal} — ${breed} — ${city}, ${state}`}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>Adopt {name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{description}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n    );\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">withRouter</span>(<span class=\"hljs-title class_\">Details</span>);\n</code></pre>\n<ul>\n<li>Every class component extends <code>React.Component</code>. Every class component must have a render method that returns some sort of JSX / markup / call to <code>React.createElement</code>.</li>\n<li>Not every component needs to have a constructor. Many don&#39;t. I&#39;ll show you momentarily how you nearly never need to have one. In this case we need it to instantiate the state object (which we&#39;ll use instead of <code>useState</code>.) If you have a constructor, you <em>have</em> to do the <code>super(props)</code> to make sure that the props are passed up to React so React can keep track of them.</li>\n<li><code>componentDidMount</code> is a function that&#39;s called after the first rendering is completed. This pretty similar to a <code>useEffect</code> call that only calls the first time. This is typically where you want to do data fetching. It doesn&#39;t have to be async; we just made it async here to make the data fetching easy.</li>\n<li>Notice instead of getting props via parameters and state via <code>useState</code> we&#39;re getting it from the instance variables <code>this.state</code> and <code>this.props</code>. This is how it works with class components. Neither one will you mutate directly.<ul>\n<li><code>this.state</code> is the mutable state of the component (like useState). You&#39;ll use <code>this.setState</code> to mutate it (don&#39;t modify it directly.)</li>\n<li><code>this.props</code> comes from the parent component, similar to parameter given to the render functions that we pull props out of.</li>\n</ul>\n</li>\n<li><code>withRouter()</code> is called a higher order component and is a bit of an advance concept. Basically we&#39;re composing functionality into our component via react-router. Think of <code>useParams</code>: it mixes in functionality from react-router by calling a hook. This is how you get that custom hook behavior of mixing in library functionality with class components. Redux does this too, but otherwise it&#39;s not overly common.</li>\n</ul>\n<h2 id=\"other-lifecycle-methods\">Other lifecycle methods</h2>\n<p>This class doesn&#39;t cover all the lifecycle methods but you can imagine having different timings for different capabilities of a component can be useful. For example, if you have a set of props that come in and you need to filter those props before you display them, you can use <code>getDerivedStateFromProps</code>. Or if you need to react to your component being removed from the DOM (like if you&#39;re subscribing to an API and you need to dispose of the subscription) you can use <code>componentWillUnmount</code>.</p>\n<p>There are lots more you can check out in <a href=\"https://reactjs.org/docs/react-component.html\">the React docs here</a>.</p>\n","slug":"class-components","title":"Class Components","section":"React Capabilities","icon":"map","filePath":"/home/runner/work/next-react-v6/next-react-v6/lessons/05-react-capabilities/B-class-components.md","nextSlug":"/next-react-v6/lessons/react-capabilities/class-properties","prevSlug":"/next-react-v6/lessons/react-capabilities/react-router"}},"__N_SSG":true}