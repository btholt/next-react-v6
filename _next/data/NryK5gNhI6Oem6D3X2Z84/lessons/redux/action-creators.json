{"pageProps":{"post":{"attributes":{"description":""},"html":"<p>Let&#39;s go make the action creators. These are the functions that the UI gives to the store to effect change: actions. These functions create actions.</p>\n<p>Create a new folder called actionCreators and put in changeTheme.js</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">changeTheme</span>(<span class=\"hljs-params\">theme</span>) {\n  <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;CHANGE_THEME&quot;</span>, <span class=\"hljs-attr\">payload</span>: theme };\n}\n</code></pre>\n<p>That&#39;s it! This one is the simplest form: create an object and return it. Some people will inline these action shapes in their React components. I prefer this because it makes refactors simple. Let&#39;s make the other two:</p>\n<p>changeLocation.js</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">changeLocation</span>(<span class=\"hljs-params\">location</span>) {\n  <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;CHANGE_LOCATION&quot;</span>, <span class=\"hljs-attr\">payload</span>: location };\n}\n</code></pre>\n<p>changeAnimal.js</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">changeAnimal</span>(<span class=\"hljs-params\">location</span>) {\n  <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;CHANGE_ANIMAL&quot;</span>, <span class=\"hljs-attr\">payload</span>: location };\n}\n</code></pre>\n<p>changeLocation.js</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">changeBreed</span>(<span class=\"hljs-params\">location</span>) {\n  <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;CHANGE_BREED&quot;</span>, <span class=\"hljs-attr\">payload</span>: location };\n}\n</code></pre>\n<p>That&#39;s it for action creators. In previous versions of this course, I taught how to do async actions so [check this out if you want to see that][v4-async]. there are a thousand flavors of how to do async with Redux. The most popular are <a href=\"https://github.com/redux-observable/redux-observable\">redux-observable</a>, <a href=\"https://redux-saga.js.org/\">redux-saga</a>, <a href=\"https://docs.psb.codes/redux-promise-middleware/\">redux-promise</a>, and <a href=\"https://github.com/reduxjs/redux-thunk\">redux-thunk</a>. I showed how to use redux-thunk because it&#39;s simplest: the others are more powerful but more complex.</p>\n","slug":"action-creators","title":"Action Creators","section":"Redux","icon":"database","filePath":"/home/runner/work/next-react-v6/next-react-v6/lessons/14-redux/C-action-creators.md","nextSlug":"/next-react-v6/lessons/redux/providers","prevSlug":"/next-react-v6/lessons/redux/reducers"}},"__N_SSG":true}