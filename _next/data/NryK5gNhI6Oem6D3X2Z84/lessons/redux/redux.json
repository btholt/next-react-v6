{"pageProps":{"post":{"attributes":{"description":""},"html":"<p>Redux is a well-known library that does state management for you, very similarly to how we used context. With context, you use the provider and consumer as a sort of portal to skip passing parameters through every component. With Redux, we&#39;re taking the state management <em>out</em> of React entirely and moving it to a separate store.</p>\n<p>Why do we have Redux?</p>\n<ol>\n<li>Context used to be a lot worse to use and less useful. This made Redux (or Redux-like) management tools the only option</li>\n<li>Redux code is <em>extremely testable</em>. This is probably the most compelling reason to use it. Having your state mutation be broken up in such a way to make it easy to test is fantastic. This is also mitigated because we have <code>useReducer</code> now.</li>\n<li>The debugging story is pretty good.</li>\n</ol>\n<p>So given that we do now have the next context API, how often will I use Redux? Never, I anticipate. I rarely had problems that Redux solved (they exist; I just didn&#39;t have them) and the few cases now where I would see myself using Redux I think React&#39;s context would cover it. But if Redux speaks to you, do it! Don&#39;t let me stop you. It&#39;s a great library. Just be cautious. And there are reasons to use it: if you have complex orchestrations of async data, Redux can be immensely useful and I <em>would</em> use it for that.</p>\n<p>Okay, let&#39;s get started. React state management is pretty simple: call setState and let React re-render. That&#39;s it! Now there&#39;s a few steps involved.</p>\n<ol>\n<li>User types in input box</li>\n<li>Call action creator to get an action</li>\n<li>Dispatch action to Redux</li>\n<li>Redux inserts the action into the root reducer</li>\n<li>The root reducer delegates that action to the correct reducer</li>\n<li>The reducer returns a new state given the old state and the action object</li>\n<li>That new state becomes the store&#39;s state</li>\n<li>React is then called by Redux and told to update</li>\n</ol>\n<p>So what was one step became several. But each step of this is testable, and that&#39;s great. And it&#39;s explicit and verbose. It&#39;s long to follow, but it&#39;s an easy breadcrumb trailer to follow when things go awry. So let&#39;s start writing it:</p>\n<p>Run <code>npm install redux@4.0.5 react-redux@7.2.2</code>. Create store.js and put in it:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> { createStore } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;redux&quot;</span>;\n<span class=\"hljs-keyword\">import</span> reducer <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./reducers&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-title function_\">createStore</span>(\n  reducer,\n  <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-variable language_\">window</span> === <span class=\"hljs-string\">&quot;object&quot;</span> &amp;&amp;\n    <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">__REDUX_DEVTOOLS_EXTENSION__</span> !== <span class=\"hljs-string\">&quot;undefined&quot;</span>\n    ? <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">__REDUX_DEVTOOLS_EXTENSION__</span>()\n    : <span class=\"hljs-function\">(<span class=\"hljs-params\">f</span>) =&gt;</span> f\n);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> store;\n</code></pre>\n<p>We&#39;re including the dev tools middleware (I&#39;ll show you at the end.) This is the base of a store: a reducer. A store is just basically a big object with prescribed ways of changing it. So let&#39;s go make our first reducer.</p>\n","slug":"redux","title":"Redux","section":"Redux","icon":"database","filePath":"/home/runner/work/next-react-v6/next-react-v6/lessons/14-redux/A-redux.md","nextSlug":"/next-react-v6/lessons/redux/reducers","prevSlug":"/next-react-v6/lessons/typescript/refactor-app"}},"__N_SSG":true}