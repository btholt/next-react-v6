{"pageProps":{"post":{"attributes":{"description":"Brian quickly converts App.tsx and wraps up"},"html":"<p>Lastly, let&#39;s do App.tsx.</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// Nothing!</span>\n</code></pre>\n<p>Because of the rest of the work we did, App needs no changes! Hooray! üéâ</p>\n<p>Last thing: open <code>index.html</code> and change the link from <code>App.js</code> to <code>App.tsx</code> and then you should be good to go!</p>\n<p>This probably felt burdensome to do. In fact, it is. I had a difficult time writing this! Converting existing JS codebasees to TypeScript necessitates a certain amount of writing and rewriting to get all the type signatures in a place that the compiler can verify everything. Be cautious before you call for your team to rewrite.</p>\n<p>However, now that we&#39;re playing TypeScript land, this code would be joyous to work on. Visual Studio Code will autocomplete for you. TypeScript will <em>instantly</em> let you know when you&#39;ve made a mistake. You can launch new code with higher certainty that you haven&#39;t created run time errors. This all comes at the cost of taking longer to write. Ask yourself if that&#39;s a trade-off you&#39;re willing to make: if you&#39;re a tiny startup that may not happen. If you&#39;re as large as Microsoft, maybe! It&#39;s a trade-off like all things are. It is a question you should answer before you start a new code base: should we type check?</p>\n<p>Last thing, let&#39;s add a type check to our package.json just in case someone isn&#39;t using a type checking editor. Add <code>&quot;typecheck&quot;: &quot;tsc --noEmit&quot;</code> to your package.json. This is also useful CI scenarios.</p>\n<p>Congrats! You finished TypeScript.</p>\n<blockquote>\n<p>üèÅ <a href=\"https://github.com/btholt/citr-v6-project/tree/master/typescript-5\">Click here to see the state of the project up until now: typescript-5</a></p>\n</blockquote>\n","slug":"refactor-app","title":"Refactor App","section":"Typescript","icon":"pencil-ruler","filePath":"/home/runner/work/next-react-v6/next-react-v6/lessons/13-typescript/K-refactor-app.md","nextSlug":"/next-react-v6/lessons/redux/redux","prevSlug":"/next-react-v6/lessons/typescript/refactor-results"}},"__N_SSG":true}