{"pageProps":{"post":{"attributes":{"description":"Brian quickly converts useBreedList.tsx"},"html":"<p>Now let&#39;s go do useBreedList.tsx. Before that, add this to APIResponseTypes.ts</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">BreedListAPIResponse</span> {\n  <span class=\"hljs-attr\">animal</span>: <span class=\"hljs-title class_\">Animal</span>;\n  <span class=\"hljs-attr\">breeds</span>: <span class=\"hljs-built_in\">string</span>[];\n}\n</code></pre>\n<p>Now onto useBreedList.tsx</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// import at top</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Animal</span>, <span class=\"hljs-title class_\">BreedListAPIResponse</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./APIResponsesTypes&quot;</span>;\n\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">localCache</span>: {\n  [<span class=\"hljs-attr\">index</span>: <span class=\"hljs-built_in\">string</span>]: <span class=\"hljs-built_in\">string</span>[];\n} = {};\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Status</span> = <span class=\"hljs-string\">&quot;unloaded&quot;</span> | <span class=\"hljs-string\">&quot;loading&quot;</span> | <span class=\"hljs-string\">&quot;loaded&quot;</span>;\n\n<span class=\"hljs-comment\">// change function signature</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useBreedList</span>(<span class=\"hljs-params\">animal: Animal</span>): [<span class=\"hljs-built_in\">string</span>[], <span class=\"hljs-title class_\">Status</span>] {\n  <span class=\"hljs-keyword\">const</span> [breedList, setBreedList] = <span class=\"hljs-title function_\">useState</span>([] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">string</span>[]);\n  <span class=\"hljs-keyword\">const</span> [status, setStatus] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&quot;unloaded&quot;</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Status</span>);\n\n  â€¦\n}\n\n<span class=\"hljs-comment\">// TypeScript wants to explicitly say that you don&#x27;t care about returned promises</span>\n<span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">requestBreedList</span>();\n\n<span class=\"hljs-comment\">// cast API response</span>\n<span class=\"hljs-keyword\">const</span> json = (<span class=\"hljs-keyword\">await</span> res.<span class=\"hljs-title function_\">json</span>()) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">BreedListAPIResponse</span>;\n</code></pre>\n<ul>\n<li>localCache can have anything as a key so we need to let TypeScript know that. We have a generic &quot;index&quot; key that could be anything, and we&#39;re letting TypeScript know that only string arrays can be set as values.</li>\n<li>Like Animal, we can only have one of three possible strings for our Status so we can make that explicit and TypeScript can keep track of that.</li>\n<li>Since <code>[]</code> and <code>&quot;unloaded&quot;</code> aren&#39;t explcit enough for TypeScript know that those are a <code>string[]</code> or a <code>Status</code>, we can cast them to TypeScript definitely knows what they are.</li>\n<li>Our linting rules make us explicitly ignore promises returned if we&#39;re not going to use them, hence the <code>void</code>.</li>\n<li>Again we have to cast our API response into the type we know it&#39;s going to be.</li>\n</ul>\n","slug":"refactor-breed-list","title":"Refactor Breed List","section":"Typescript","icon":"pencil-ruler","filePath":"/home/runner/work/next-react-v6/next-react-v6/lessons/13-typescript/H-refactor-breed-list.md","nextSlug":"/next-react-v6/lessons/typescript/refactor-search-params","prevSlug":"/next-react-v6/lessons/typescript/refactor-pet"}},"__N_SSG":true}