{"pageProps":{"post":{"attributes":{"description":"Brian quickly converts Carousel.tsx"},"html":"<p>Now that that is done, let&#39;s go do Carousel.tsx</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">MouseEvent</span>, <span class=\"hljs-title class_\">ReactNode</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n\n<span class=\"hljs-comment\">// above Carousel</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">IProps</span> {\n  <span class=\"hljs-attr\">images</span>: <span class=\"hljs-built_in\">string</span>[];\n}\n\n<span class=\"hljs-comment\">// add types to class</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Carousel</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Component</span>&lt;<span class=\"hljs-title class_\">IProps</span>&gt; { ‚Ä¶ }\n\n<span class=\"hljs-comment\">// add types to state</span>\nstate = {\n  <span class=\"hljs-attr\">active</span>: <span class=\"hljs-number\">0</span>\n};\n\n<span class=\"hljs-comment\">// modify handleIndexClick</span>\nhandleIndexClick = (<span class=\"hljs-attr\">event</span>: <span class=\"hljs-title class_\">MouseEvent</span>&lt;<span class=\"hljs-title class_\">HTMLElement</span>&gt;): <span class=\"hljs-function\"><span class=\"hljs-params\">void</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (!(event.<span class=\"hljs-property\">target</span> <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">HTMLElement</span>)) {\n    <span class=\"hljs-keyword\">return</span>;\n  }\n\n  <span class=\"hljs-keyword\">if</span> (event.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">dataset</span>.<span class=\"hljs-property\">index</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>({\n      <span class=\"hljs-attr\">active</span>: +event.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">dataset</span>.<span class=\"hljs-property\">index</span>,\n    });\n  }\n};\n\n<span class=\"hljs-comment\">// add return type</span>\n<span class=\"hljs-title function_\">render</span>(): <span class=\"hljs-title class_\">ReactNode</span> { }\n</code></pre>\n<ul>\n<li>React.Component is a generic, in that it can accept other types. Here we&#39;re telling it what its state and props will look like. We start the interfaces off with a capital I because this signifies that this is an interface. This is a common pattern and one TSLint enforced but ESLint doesn&#39;t by deafult. I&#39;m showing you so you can make your own call.</li>\n<li>We could specify an <code>IState</code> as well as a second parameter to the <code>Component</code> generic but since we have the <code>state = {}</code> it can infer that without us doing that.</li>\n<li>We need to type the event type coming back from the DOM. We know it&#39;ll come from an HTML element, and we have to make sure it&#39;s not a generic window event. TypeScript forces a lot of this defensive programming.</li>\n</ul>\n<p>Carousel is done.</p>\n<blockquote>\n<p>üèÅ <a href=\"https://github.com/btholt/citr-v6-project/tree/master/typescript-3\">Click here to see the state of the project up until now: typescript-3</a></p>\n</blockquote>\n","slug":"refactor-carousel","title":"Refactor Carousel","section":"Typescript","icon":"pencil-ruler","filePath":"/home/runner/work/next-react-v6/next-react-v6/lessons/13-typescript/F-refactor-carousel.md","nextSlug":"/next-react-v6/lessons/typescript/refactor-pet","prevSlug":"/next-react-v6/lessons/typescript/refactor-error-boundary"}},"__N_SSG":true}