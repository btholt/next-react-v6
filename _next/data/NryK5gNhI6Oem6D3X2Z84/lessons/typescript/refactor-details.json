{"pageProps":{"post":{"attributes":{"description":"Brian quickly converts Details.tsx"},"html":"<p>Let&#39;s go fix another file. Details.tsx. Before we get into the file, make a new file called <code>APIResponsesTypes.ts</code>. In there put</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Animal</span> = <span class=\"hljs-string\">&quot;dog&quot;</span> | <span class=\"hljs-string\">&quot;cat&quot;</span> | <span class=\"hljs-string\">&quot;bird&quot;</span> | <span class=\"hljs-string\">&quot;reptile&quot;</span> | <span class=\"hljs-string\">&quot;rabbit&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Pet</span> {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">animal</span>: <span class=\"hljs-title class_\">Animal</span>;\n  <span class=\"hljs-attr\">description</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">breed</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">images</span>: <span class=\"hljs-built_in\">string</span>[];\n  <span class=\"hljs-attr\">city</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">state</span>: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">PetAPIResponse</span> {\n  <span class=\"hljs-attr\">numberOfResults</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">startIndex</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">endIndex</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">hasNext</span>: <span class=\"hljs-built_in\">boolean</span>;\n  <span class=\"hljs-attr\">pets</span>: <span class=\"hljs-title class_\">Pet</span>[];\n}\n</code></pre>\n<ul>\n<li>This allows us to resuse these response types anywhere we reference the API responses and have an enforceable shape that TypeScript knows what to do with.</li>\n<li>We made <code>Animal</code> a type instead of an interface. This confuses people a lot and the sum of the answer is it frequently doesn&#39;t matter which you choose. The general advice is &quot;use interfaces unless you need type aliases&quot;. Here we wanted to have a type alias that just allows a few different strings, something an interface can&#39;t do but a type can.</li>\n</ul>\n<p>Onto Details. Rename it Details.tsx</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// imports</span>\n<span class=\"hljs-keyword\">import</span> { withRouter, <span class=\"hljs-title class_\">RouteComponentProps</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react-router-dom&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">PetAPIResponse</span>, <span class=\"hljs-title class_\">Animal</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./APIResponsesTypes&quot;</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Details</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Component</span>&lt;<span class=\"hljs-title class_\">RouteComponentProps</span>&lt;{ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">string</span> }&gt;&gt; { ‚Ä¶ }\n\n<span class=\"hljs-comment\">// add public to methods</span>\n\n<span class=\"hljs-comment\">// replace state</span>\nstate = {\n  <span class=\"hljs-attr\">loading</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">showModal</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">animal</span>: <span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Animal</span>,\n  <span class=\"hljs-attr\">breed</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n  <span class=\"hljs-attr\">city</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n  <span class=\"hljs-attr\">state</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n  <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n  <span class=\"hljs-attr\">images</span>: [] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">string</span>[],\n};\n\n<span class=\"hljs-comment\">// inside componentDidMount</span>\n<span class=\"hljs-keyword\">const</span> json = (<span class=\"hljs-keyword\">await</span> res.<span class=\"hljs-title function_\">json</span>()) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">PetAPIResponse</span>;\n\n<span class=\"hljs-comment\">// add href to toggleModal</span>\nadopt = <span class=\"hljs-function\">() =&gt;</span> (<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">href</span> = <span class=\"hljs-string\">&quot;http://bit.ly/pet-adopt&quot;</span>);\n\n<span class=\"hljs-comment\">// error boundary</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">DetailsErrorBoundary</span>: <span class=\"hljs-title class_\">FunctionComponent</span> = <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">DetailsErrorBoundary</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ErrorBoundary</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DetailsWithRouter</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ErrorBoundary</span>&gt;</span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">DetailsErrorBoundary</span>;\n</code></pre>\n<ul>\n<li>We need to tell TypeScript what props each component expects. Now when you import that component elsewhere, TS will make sure the consumer passes all the right props in.</li>\n<li>We need to use React Router&#39;s RouteComponentProps params because the ID param will come from the router, not directly from the consumer.</li>\n<li>We have to give all state a default setting. This prevents errors on the initial render and it gives TypeScript the ability to infer all your types.</li>\n<li>It can&#39;t tell what type photos is so we tell it&#39;s an array of strings from the pet library.</li>\n<li>We had to add <code>.href</code> to the end of location. Technically that API expect a Location object but it just works with a string. With TS we need to be a bit more adherent to the spec so we&#39;ll do it the correct by setting <code>.href</code>.</li>\n<li>TS still won&#39;t be happy because our other pages haven&#39;t been typed yet. We&#39;re getting there.</li>\n<li>We changed up the export a bit so we could just use FunctionComponent. This will ease using it in other places because TypeScript knows for a fact this is a FunctionComponent.</li>\n</ul>\n<blockquote>\n<p>üèÅ <a href=\"https://github.com/btholt/citr-v6-project/tree/master/typescript-2\">Click here to see the state of the project up until now: typescript-2</a></p>\n</blockquote>\n","slug":"refactor-details","title":"Refactor Details","section":"Typescript","icon":"pencil-ruler","filePath":"/home/runner/work/next-react-v6/next-react-v6/lessons/13-typescript/D-refactor-details.md","nextSlug":"/next-react-v6/lessons/typescript/refactor-error-boundary","prevSlug":"/next-react-v6/lessons/typescript/refactor-theme-context"}},"__N_SSG":true}