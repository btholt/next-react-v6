{"pageProps":{"post":{"attributes":{"title":"ErrorBoundary","path":"/ts-error-boundary","order":"13E","section":"TypeScript","description":"Brian quickly converts ErrorBoundary.tsx"},"html":"<p>Let&#39;s go do ErrorBoundary.tsx now</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// import at top</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">ErrorInfo</span>, <span class=\"hljs-title class_\">ReactNode</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n\n<span class=\"hljs-comment\">// delete constructor, replace with this:</span>\nstate = {\n  <span class=\"hljs-attr\">redirect</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n  <span class=\"hljs-attr\">hasError</span>: <span class=\"hljs-literal\">false</span>\n};\n\n<span class=\"hljs-comment\">// add types and return types to parameters</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getDerivedStateFromError</span>(): { <span class=\"hljs-attr\">hasError</span>: <span class=\"hljs-built_in\">boolean</span>; <span class=\"hljs-attr\">redirect</span>: <span class=\"hljs-built_in\">boolean</span> } {}\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">componentDidCatch</span>(<span class=\"hljs-attr\">error</span>: <span class=\"hljs-title class_\">Error</span>, <span class=\"hljs-attr\">info</span>: <span class=\"hljs-title class_\">ErrorInfo</span>): <span class=\"hljs-built_in\">void</span> {}\n<span class=\"hljs-title function_\">componentDidUpdate</span>(): <span class=\"hljs-built_in\">void</span> {}\n<span class=\"hljs-title function_\">render</span>(): <span class=\"hljs-title class_\">ReactNode</span> {}\n</code></pre>\n<ul>\n<li>We didn&#39;t have to change from a constructor to a public class property but it makes typing so much easier because TS knows how to handle it implicitly if you use public class properties.</li>\n<li>We had to type the parameters and return types. We have TS in strict mode and a pretty strict set of linting rules which means it doesn&#39;t like anything to be an <code>any</code> type.</li>\n</ul>\n","slug":"refactor-error-boundary","title":"ErrorBoundary","section":"Typescript","icon":"pencil-ruler","filePath":"/home/runner/work/next-react-v6/next-react-v6/lessons/13-typescript/E-refactor-error-boundary.md","nextSlug":"/next-react-v6/lessons/typescript/refactor-carousel","prevSlug":"/next-react-v6/lessons/typescript/refactor-details"}},"__N_SSG":true}