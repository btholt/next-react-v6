{"pageProps":{"post":{"attributes":{"description":"Brian quickly converts SearchParams.tsx"},"html":"<p>Let&#39;s go do SearchParams.tsx</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// update React import, add Reach Router import</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FunctionComponent</span>, useState, useEffect, useContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">RouteComponentProps</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@reach/router&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">PetAPIResponse</span>, <span class=\"hljs-title class_\">Animal</span>, <span class=\"hljs-title class_\">Pet</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./APIResponsesTypes&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">ANIMALS</span>: <span class=\"hljs-title class_\">Animal</span>[] = [<span class=\"hljs-string\">&quot;bird&quot;</span>, <span class=\"hljs-string\">&quot;cat&quot;</span>, <span class=\"hljs-string\">&quot;dog&quot;</span>, <span class=\"hljs-string\">&quot;rabbit&quot;</span>, <span class=\"hljs-string\">&quot;reptile&quot;</span>];\n\n<span class=\"hljs-comment\">// replace function declaration</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SearchParams</span>: <span class=\"hljs-title class_\">FunctionComponent</span>&lt;<span class=\"hljs-title class_\">RouteComponentProps</span>&gt; = <span class=\"hljs-function\">() =&gt;</span> {\n  ‚Ä¶\n}\n\n<span class=\"hljs-comment\">// replace useState calls</span>\n<span class=\"hljs-keyword\">const</span> [animal, updateAnimal] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Animal</span>);\n<span class=\"hljs-keyword\">const</span> [pets, setPets] = <span class=\"hljs-title function_\">useState</span>([] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Pet</span>[]);\n\n<span class=\"hljs-comment\">// add void to effect</span>\n<span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">requestPets</span>();\n\n<span class=\"hljs-comment\">// in PetRequest</span>\n<span class=\"hljs-keyword\">const</span> json = (<span class=\"hljs-keyword\">await</span> res.<span class=\"hljs-title function_\">json</span>()) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">PetAPIResponse</span>;\n\n<span class=\"hljs-comment\">//</span>\n<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span>\n  <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;animal&quot;</span>\n  <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{animal}</span>\n  <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =&gt;</span> updateAnimal(e.target.value as Animal)}\n  onBlur={(e) =&gt; updateAnimal(e.target.value as Animal)}\n&gt;\n  { ‚Ä¶ }\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span></span>\n</code></pre>\n<ul>\n<li>Occasionally you need to give TypeScript a hint to what it&#39;s going to get. That&#39;s what <code>as</code> for: you&#39;re saying I&#39;m sure it&#39;s going to be this.</li>\n<li>We have to let React know what sort of parameters this component expects. And in this case it&#39;s a React Router route so it expects a path so we need let TypeScript in on the secret. This actually isn&#39;t required here but we do know that it will be a route component so might as well be explicit. It makes it easier to come bakc later.</li>\n<li>We didn&#39;t have to add all the Animal typings but since we know it&#39;s that we may as well.</li>\n</ul>\n<blockquote>\n<p>üèÅ <a href=\"https://github.com/btholt/citr-v6-project/tree/master/typescript-4\">Click here to see the state of the project up until now: typescript-4</a></p>\n</blockquote>\n","slug":"refactor-search-params","title":"Refactor Search Params","section":"Typescript","icon":"pencil-ruler","filePath":"/home/runner/work/next-react-v6/next-react-v6/lessons/13-typescript/I-refactor-search-params.md","nextSlug":"/next-react-v6/lessons/typescript/refactor-results","prevSlug":"/next-react-v6/lessons/typescript/refactor-breed-list"}},"__N_SSG":true}