{"pageProps":{"post":{"attributes":{"title":"ThemeContext","path":"/ts-theme-context","order":"13C","section":"TypeScript","description":"Brian quickly converts ThemeContext.tsx"},"html":"<p>Let&#39;s quickly do ThemeContext.tsx</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// replace</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ThemeContext</span> = createContext&lt;[<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">theme: <span class=\"hljs-built_in\">string</span></span>) =&gt;</span> <span class=\"hljs-built_in\">void</span>]&gt;([\n  <span class=\"hljs-string\">&quot;green&quot;</span>,\n  <span class=\"hljs-function\">() =&gt;</span> {},\n]);\n</code></pre>\n<ul>\n<li>Here we just have to tell TS that we have a strict ordering of string and function. This will make other files easier to type.</li>\n<li>We&#39;re telling it that this function will accept a string which TypeScript will enforce for us later.</li>\n</ul>\n","slug":"refactor-theme-context","title":"ThemeContext","section":"Typescript","icon":"pencil-ruler","filePath":"/home/runner/work/next-react-v6/next-react-v6/lessons/13-typescript/C-refactor-theme-context.md","nextSlug":"/next-react-v6/lessons/typescript/refactor-details","prevSlug":"/next-react-v6/lessons/typescript/typescript-and-eslint"}},"__N_SSG":true}